{
    "collab_server" : "",
    "contents" : "__global__ void VecAddGPU(float* a, float* b, float* c) {\n  int k = blockIdx.x * blockDim.x + threadIdx.x;\n  c[k] = a[k] + b[k];\n}\n\nextern \"C\" {\n  #include <stdio.h>\n  \n  void VecAdd(float* a, float* b, float* c, int* n) {\n    if((*n)%20 != 0) {\n      printf(\"This toy example requires the vector length to be a multiple of 20.\\n\");\n      return;\n    }\n\n    float *a_GPU, *b_GPU, *c_GPU;\n\n    cudaMalloc(&a_GPU, *n*sizeof(float));\n    cudaMalloc(&b_GPU, *n*sizeof(float));\n    cudaMalloc(&c_GPU, *n*sizeof(float));\n\n    cudaMemcpy(a_GPU, a, *n*sizeof(float), cudaMemcpyHostToDevice);\n    cudaMemcpy(b_GPU, b, *n*sizeof(float), cudaMemcpyHostToDevice);\n\n    VecAddGPU<<<20,(*n)/20>>>(a_GPU, b_GPU, c_GPU);\n    cudaThreadSynchronize();\n\n    cudaMemcpy(c, c_GPU, *n*sizeof(float), cudaMemcpyDeviceToHost);\n\n    cudaFree(a_GPU);\n    cudaFree(b_GPU);\n    cudaFree(c_GPU);\n  }\n}\n",
    "created" : 1480082904097.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1293333119",
    "id" : "F8FF70CD",
    "lastKnownWriteTime" : 1479916462,
    "last_content_update" : 1480082943733,
    "path" : "~/Desktop/Project 4/OxWaSP/src/vecadd.c",
    "project_path" : "src/vecadd.c",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "c"
}