getwd()
dyn.load("src/sq.so")
ans <-.C(”sq”,as.double(2),sqresult=as.double(0))
?dyn.load()
is.loaded("sq.so")
is.loaded("src/sq.so")
getwd()
is.loaded("src/sq.so*")
dyn.load("src/")
library(OxWaSP,lib.loc = "../")
install.packages("../OxWaSP2_1.2.tar.gz")
library(OxWaSP2)
install.packages("../OxWaSP2_1.2.tar.gz",lib ="../" )
library(OxWaSP2,lib.loc = "../")
install.packages("../OxWaSP2_1.2.tar.gz",lib ="../Packages/" )
install.packages("../OxWaSP2_1.2.tar.gz",lib ="../Packages/",type = "source" )
tempdir()
library(OxWaSP2)
sq(100)
library(Rcpp)
library(mvtnorm)
source("GMM_Den.R")
setwd("R/")
source("GMM_Den.R")
sourceCpp("GMM_Densities.cpp")
source("MH_MCMC_chain.R")
source("augmented_target.R")
sim_dat <- as.matrix(simulate_dat(100,test_mean,test_stand_dev,test_probs))
test1 <- MH_MCMC_chain(Iterations = 1000,target_density = GMM_LL_CPP,proposal_sd = 1.23,
sim_dat <- as.matrix(simulate_dat(100,test_mean,test_stand_dev,test_probs))
sim_dat <- as.matrix(simulate_dat(100,test_mean,test_stand_dev,test_probs))
test_mean <- as.matrix(c(-1.5,1))
test_stand_dev <- as.matrix(c(0.75,1))
test_probs <- as.matrix(c(1/3,2/3))
sim_dat <- as.matrix(simulate_dat(100,test_mean,test_stand_dev,test_probs))
test1 <- MH_MCMC_chain(Iterations = 1000,target_density = GMM_LL_CPP,proposal_sd = 1.23,
inital_value = rep(0,2),
x=sim_dat,stand_dev=test_stand_dev,probs=test_probs,to_log = T)
library(parallel)
total_iterations <- 10000
chain_count <- 8 #Number of subsets
sim_dat <- as.matrix(simulate_dat(800,test_mean,test_stand_dev,test_probs))
A <- as.list(data.frame(matrix(1:(dim(sim_dat)[1]),ncol=chain_count)[,1:(chain_count-1)]))
A[[chain_count]] <- (tail(A[[chain_count-1]],1)+1):(dim(sim_dat)[1])
qnorm(10)
pnorm(10)
qnorm(0)
pnorm(0)
rnorm(100,mean=rep(0,4))
rmvnorm(100,mean=rep(0,4))
simulated_probit_data <- simulated_probit_data(10000,10)
source("probit_funcs.R")
source("probit_funcs.R")
source("MH_MCMC_chain.R")
simulated_probit_data <- sim_probit(10000,10)
source("probit_funcs.R")
simulated_probit_data <- sim_probit(10000,10)
source("probit_funcs.R")
simulated_probit_data <- sim_probit(10000,10)
source("probit_funcs.R")
simulated_probit_data <- sim_probit(10000,10)
source("probit_funcs.R")
simulated_probit_data <- sim_probit(10000,10)
source("probit_funcs.R")
source("MH_MCMC_chain.R")
simulated_probit_data <- sim_probit(10000,10)
simulated_probit_data$obs
simulated_probit_data$beta
glm(simulated_probit_data$obs~simulated_probit_data$design_mat,family = "binomial")
glm(simulated_probit_data$obs~simulated_probit_data$design_mat + 0,family = "binomial")
simulated_probit_data$design_mat
glm_test <- glm(simulated_probit_data$obs~simulated_probit_data$design_mat + 0,family = "binomial")
glm_test$coefficients
simulated_probit_data$beta
simulated_probit_data <- sim_probit(100000,10)
simulated_probit_data$beta
glm_test <- glm(simulated_probit_data$obs~simulated_probit_data$design_mat + 0,family = "binomial")
glm_test$coefficients
simulated_probit_data$beta
simulated_probit_data <- sim_probit(10000,4)
simulated_probit_data$beta
glm_test <- glm(simulated_probit_data$obs~simulated_probit_data$design_mat + 0,family = "binomial")
glm_test$coefficients
simulated_probit_data$beta
simulated_probit_data <- sim_probit(10000,50)
simulated_probit_data$beta
glm_test <- glm(simulated_probit_data$obs~simulated_probit_data$design_mat + 0,family = "binomial")
glm_test$coefficients
glm_test$coefficients
glm_test <- glm(simulated_probit_data$obs~simulated_probit_data$design_mat + 0,family = "binomial")
glm_test$coefficients
simulated_probit_data$beta
plot(glm_test$coefficients,simulated_probit_data$beta)
augmented_density(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat,
to_log=T)
augmented_density(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat,
to_log=T)
source("probit_funcs.R")
augmented_density(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat,
to_log=T)
source("probit_funcs.R")
augmented_density(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat,
to_log=T)
source("probit_funcs.R")
augmented_density(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat,
to_log=T)
probit_den(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat)
probit_den(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat)
source("probit_funcs.R")
probit_den(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat)
source("probit_funcs.R")
probit_den(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat)
source("probit_funcs.R")
probit_den(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat)
source("probit_funcs.R")
probit_den(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat)
source("probit_funcs.R")
probit_den(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat)
augmented_density(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat,
to_log=T)
source("probit_funcs.R")
source("MH_MCMC_chain.R")
simulated_probit_data <- sim_probit(10000,50)
simulated_probit_data$beta
simulated_probit_data$design_mat
dim(simulated_probit_data$design_mat)
glm_test <- glm(simulated_probit_data$obs~simulated_probit_data$design_mat + 0,family = "binomial")
total_iterations <- 10000
MH_MCMC_chain(
Iterations = total_iterations,
target_density = Augmented_target,
proposal_sd = 1,
inital_value = rep(-5,50),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
)
probit_dimension <- 50
obs_count 1e4
obs_count <- 1e4
simulated_probit_data <- sim_probit(obs_count,probit_dimension)
simulated_probit_data
total_iterations <- 10000
MH_MCMC_chain(
Iterations = total_iterations,
target_density = Augmented_target,
proposal_sd = 1,
inital_value = rep(-5,probit_dimension),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
)
t(rep(-5,probit_dimension))
MH_MCMC_chain(
Iterations = total_iterations,
target_density = Augmented_target,
proposal_sd = 1,
inital_value = as.matrix(rep(-5,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
)
source("MH_MCMC_chain.R")
MH_MCMC_chain(
Iterations = total_iterations,
target_density = Augmented_target,
proposal_sd = 1,
inital_value = as.matrix(rep(-5,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
)
MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 1,
inital_value = as.matrix(rep(-5,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
)
source("MH_MCMC_chain.R")
MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 1,
inital_value = as.matrix(rep(-5,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
)
augmented_density(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat,
to_log=T,
chain_count = 1)
augmented_density(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat,
to_log=T,
chain_count = 1)
augmented_density(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat,
to_log=T)
probit_den(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat)
probit_dimension <- 50
obs_count <- 1e4
simulated_probit_data <- sim_probit(obs_count,probit_dimension)
glm_test <- glm(simulated_probit_data$obs~simulated_probit_data$design_mat + 0,family = "binomial")
probit_den(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat)
augmented_density(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat,
to_log=T)
MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 1,
inital_value = as.matrix(rep(-5,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
)
MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 1,
inital_value = as.matrix(rep(-5,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
)
MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 1,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
test_MCMC <- MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 1,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
)
source("NonParametric_Density_Product_Estimates.R")
nonparametric_implemetation(test_MCMC)
test_MCMC
total_iterations <- 1000
test_MCMC <- MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 1,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
)
test_MCMC <- MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 1,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
test_MCMC <- MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 0.1,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
test_MCMC <- MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 0.01,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T)
Non_para1 <- nonparametric_implemetation(test_MCMC)
test_MCMC
Non_para1 <- nonparametric_implemetation(test_MCMC)
chain_count <- 8 #Number of subsets
A <- as.list(data.frame(matrix(1:obs_count,ncol=chain_count)[,1:(chain_count-1)]))
A[[chain_count]] <- (tail(A[[chain_count-1]],1)+1):obs_count
A
length(A)
dim(simulated_probit_data$design_mat)
test3 <- mclapply(A,
function(z){t(
test_MCMC <- MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 0.01,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs[z],
design_mat=simulated_probit_data$design_mat[z,], ##Pull out those observations
to_log = T)
)
},
mc.cores = min(chain_count,8)
)
test_nonparametric <- nonparametric_implemetation(test3)
test_nonparametric
plot(test_nonparametric[1,])
plot(test_nonparametric[,1])
abline(simulated_probit_data$beta[1])
abline(h= simulated_probit_data$beta[1])
rowMeans(test_MCMC)
plot(rowMeans(test_MCMC),simulated_probit_data$beta)
augmented_density(observations = simulated_probit_data$obs,
beta = rowMeans(test_MCMC),
design_mat = simulated_probit_data$design_mat,
to_log=T)
augmented_density(observations = simulated_probit_data$obs,
beta = glm_test$coefficients,
design_mat = simulated_probit_data$design_mat,
to_log=T)
plot(rowMeans(test_MCMC)-simulated_probit_data$beta)
boxplot(rowMeans(test_MCMC)-simulated_probit_data$beta)
plot(rowMeans(test_MCMC)-simulated_probit_data$beta)
test3 <- mclapply(A,
function(z){t(
test_MCMC <- MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 0.01,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs[z],
design_mat=simulated_probit_data$design_mat[z,], ##Pull out those observations
to_log = T,
Chain_count = Chain_count)
)
},
mc.cores = min(Chain_count,8)
)
Chain_count <- 8 #Number of subsets
test3 <- mclapply(A,
function(z){t(
test_MCMC <- MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 0.01,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs[z],
design_mat=simulated_probit_data$design_mat[z,], ##Pull out those observations
to_log = T,
Chain_count = Chain_count)
)
},
mc.cores = min(Chain_count,8)
)
test_MCMC <- MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 0.01,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T,Chain_count=Chain_count)
source("probit_funcs.R")
test_MCMC <- MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 0.01,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs,
design_mat=simulated_probit_data$design_mat,
to_log = T,Chain_count=Chain_count)
test3 <- mclapply(A,
function(z){t(
test_MCMC <- MH_MCMC_chain(
Iterations = total_iterations,
target_density = augmented_density,
proposal_sd = 0.01,
inital_value = as.matrix(rep(0,probit_dimension)),
observations=simulated_probit_data$obs[z],
design_mat=simulated_probit_data$design_mat[z,], ##Pull out those observations
to_log = T,
Chain_count = Chain_count)
)
},
mc.cores = min(Chain_count,8)
)
test_nonparametric <- nonparametric_implemetation(test3)
plot(test_nonparametric[,1])
abline(h= simulated_probit_data$beta[1])
